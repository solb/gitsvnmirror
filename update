#!/bin/sh

. hooks/vars.sh
lockpath=$adapterpath/.git/$lockfile
branch=`echo $1 | cut -d / -f 3`
newhash=$3

mergemsgs=`git log --oneline --first-parent --merges $newhash | cut -d \  -f 2-`
if echo -n $mergemsgs | grep -vxqE "Merge (commit|branch) '.*'.*" #someone changed a message better left alone
	then
		echo
		echo "POLICY: Rewording the first line of merge commits is prohibited"
		echo "  While it is fine to add lines after the default merge message,"
		echo "  you are required to leave the original information intact."
		echo "  Contact our configuration manager with questions or comments."
		succeeded="false"
	elif echo -n $mergemsgs | cut -d \' -f 2 | grep -xq $branch #found a merge commit merging from this branch onto itself
		then
			echo
			echo "POLICY: Trivial merges joining one branch with itself are forbidden"
			echo "  (They obfuscate our version history and break SVN *hard*)"
			echo "  These often arise automatically for one of two reasons:"
			echo '  1. A $(git pull) encountered someone else'"'"'s concurrent changes'
			echo "    Here's an example of how to reverse and remedy this:"
			echo "      a. Checkout the problematic branch"
			echo "      b. Run: $ git rebase origin/<branch name>"
			echo "      c. Try pushing again"
			echo "    To avoid this problem next time:"
			echo '      Replace your use of $(git pull) with: $ git pull --rebase'
			echo "    To automate this solution:"
			echo "      a. Run: $ git config branch.autosetuprebase always"
			echo "      b. For each branch: $ git config branch.<branch name>.rebase true"
			echo '  2. A $(git merge) from a feature branch performed a fast-forward'
			echo "    Here's an example of how to reverse and remedy this:"
			echo "      CASE Merging onto the branch was your most recent change to it:"
			echo "        a. Checkout the problematic branch"
			echo "        b. Run: $ git reset --hard ORIG_HEAD"
			echo "          DANGER, W.R.: Backup your branch, or at least your work tree"
			echo "        c. Run: $ git merge --no-ff <feature branch>"
			echo "        d. Try pushing again"
			echo "      CASE You've since made other changes to the problem branch:"
			echo "        Call the configuration manager for assistance"
			echo "    To avoid this problem next time:"
			echo '      Replace your use of $(git merge) with: $ git merge --no-ff'
			echo "    To automate this solution:"
			echo "      a. Follow the steps for automating cause 1's solution above"
			echo "      b. Run: $ git config merge.ff false"
			echo "  Contact our configuration manager for assistance if you're uncertain."
			succeeded="false"
	else
		succeeded="true"
	fi

if $succeeded
	then
		true #allow pushing this ref
	else
		echo -n $((`cat $lockpath`+1)) > $lockpath #increment failure count
		if [ `cat $lockpath` -eq `cat $lockpath$totalextension` ] #we rejected ALL refs
			then
				rm $lockpath $lockpath$totalextension #unlock even though we've pushed nothing
			fi
		false #reject this ref
	fi
